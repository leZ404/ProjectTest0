{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/yanis/OneDrive/Bureau/Log3900 start prcjcts base/2/LOG2990-108-master/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { consts } from '@common/consts';\nimport * as i0 from \"@angular/core\";\nexport class ImageManagerService {\n  fileToString(file) {\n    return _asyncToGenerator(function* () {\n      if (file) {\n        const reader = new FileReader();\n        return new Promise(resolve => {\n          reader.readAsDataURL(file);\n\n          reader.onload = () => {\n            var _a;\n\n            return resolve((_a = reader.result) === null || _a === void 0 ? void 0 : _a.toString());\n          };\n        });\n      }\n\n      return undefined;\n    })();\n  }\n\n  validateImage(file) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const image = yield _this.fileToString(file);\n\n      if (file && image.startsWith('data:image/bmp;base64,')) {\n        const img = new Image();\n        img.src = URL.createObjectURL(file);\n        return new Promise((resolve, reject) => {\n          _this.validateImageSize(img).then(valid => {\n            if (valid) resolve(image);\n            reject(image);\n          });\n        });\n      }\n\n      return undefined;\n    })();\n  }\n\n  validateImageSize(img) {\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        img.onload = () => {\n          resolve(img.width === consts.IMAGE_WIDTH && img.height === consts.IMAGE_HEIGHT);\n        };\n      });\n    })();\n  }\n\n}\n\nImageManagerService.ɵfac = function ImageManagerService_Factory(t) {\n  return new (t || ImageManagerService)();\n};\n\nImageManagerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageManagerService,\n  factory: ImageManagerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,MAAT,QAAuB,gBAAvB;;AAKA,OAAM,MAAOC,mBAAP,CAA0B;EACtBC,YAAY,CAACC,IAAD,EAAkB;IAAA;MAChC,IAAIA,IAAJ,EAAU;QACN,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;QACA,OAAO,IAAIC,OAAJ,CAAiCC,OAAD,IAAY;UAC/CH,MAAM,CAACI,aAAP,CAAqBL,IAArB;;UACAC,MAAM,CAACK,MAAP,GAAgB,MAAK;YAAA;;YAAC,cAAO,CAAC,YAAM,CAACC,MAAP,MAAa,IAAb,IAAaC,aAAb,GAAa,MAAb,GAAaA,GAAEC,QAAF,EAAd,CAAP;UAAkC,CAAxD;QACH,CAHM,CAAP;MAIH;;MACD,OAAOC,SAAP;IARgC;EASnC;;EAEKC,aAAa,CAACX,IAAD,EAAW;IAAA;;IAAA;MAC1B,MAAMY,KAAK,SAAU,KAAI,CAACb,YAAL,CAAkBC,IAAlB,CAArB;;MACA,IAAIA,IAAI,IAAIY,KAAK,CAACC,UAAN,CAAiB,wBAAjB,CAAZ,EAAwD;QACpD,MAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;QACAD,GAAG,CAACE,GAAJ,GAAUC,GAAG,CAACC,eAAJ,CAAoBlB,IAApB,CAAV;QACA,OAAO,IAAIG,OAAJ,CAAoB,CAACC,OAAD,EAAUe,MAAV,KAAoB;UAC3C,KAAI,CAACC,iBAAL,CAAuBN,GAAvB,EAA4BO,IAA5B,CAAkCC,KAAD,IAAU;YACvC,IAAIA,KAAJ,EAAWlB,OAAO,CAACQ,KAAD,CAAP;YACXO,MAAM,CAACP,KAAD,CAAN;UACH,CAHD;QAIH,CALM,CAAP;MAMH;;MACD,OAAOF,SAAP;IAZ0B;EAa7B;;EACKU,iBAAiB,CAACN,GAAD,EAAsB;IAAA;MACzC,OAAO,IAAIX,OAAJ,CAAsBC,OAAD,IAAY;QACpCU,GAAG,CAACR,MAAJ,GAAa,MAAK;UACdF,OAAO,CAACU,GAAG,CAACS,KAAJ,KAAc1B,MAAM,CAAC2B,WAArB,IAAoCV,GAAG,CAACW,MAAJ,KAAe5B,MAAM,CAAC6B,YAA3D,CAAP;QACH,CAFD;MAGH,CAJM,CAAP;IADyC;EAM5C;;AAhC2B;;;mBAAnB5B;AAAmB;;;SAAnBA;EAAmB6B,SAAnB7B,mBAAmB;EAAA8B,YAFhB","names":["consts","ImageManagerService","fileToString","file","reader","FileReader","Promise","resolve","readAsDataURL","onload","result","_a","toString","undefined","validateImage","image","startsWith","img","Image","src","URL","createObjectURL","reject","validateImageSize","then","valid","width","IMAGE_WIDTH","height","IMAGE_HEIGHT","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\yanis\\OneDrive\\Bureau\\Log3900 start prcjcts base\\2\\LOG2990-108-master\\client\\src\\app\\services\\image-manager.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { consts } from '@common/consts';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ImageManagerService {\n    async fileToString(file: File | null) {\n        if (file) {\n            const reader = new FileReader();\n            return new Promise<string | undefined>((resolve) => {\n                reader.readAsDataURL(file);\n                reader.onload = () => resolve(reader.result?.toString());\n            });\n        }\n        return undefined;\n    }\n\n    async validateImage(file: File) {\n        const image = (await this.fileToString(file)) as string;\n        if (file && image.startsWith('data:image/bmp;base64,')) {\n            const img = new Image();\n            img.src = URL.createObjectURL(file);\n            return new Promise<string>((resolve, reject) => {\n                this.validateImageSize(img).then((valid) => {\n                    if (valid) resolve(image);\n                    reject(image);\n                });\n            });\n        }\n        return undefined;\n    }\n    async validateImageSize(img: HTMLImageElement): Promise<boolean> {\n        return new Promise<boolean>((resolve) => {\n            img.onload = () => {\n                resolve(img.width === consts.IMAGE_WIDTH && img.height === consts.IMAGE_HEIGHT);\n            };\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}